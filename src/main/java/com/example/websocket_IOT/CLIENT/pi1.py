import websocket
import threading
import json
import time
import cv2
import requests
from gpio_helper import GPIO  # D√πng m√¥ ph·ªèng ho·∫∑c import RPi.GPIO n·∫øu ch·∫°y th·∫≠t

# --- Kh·ªüi t·∫°o GPIO ---
gpio = GPIO()
LED_PIN = 18
gpio.setmode(gpio.BCM)
gpio.setup(LED_PIN, gpio.OUT)

# --- Config thi·∫øt b·ªã ---
USER_ID = "u1"
DEVICE_ID = "d1"
SERVER_WS = "ws://42.116.105.110:3000/ws"
SERVER_API = f"http://42.116.105.110:3000/api/stream-frames/{USER_ID}/{DEVICE_ID}"

# --- Tr·∫°ng th√°i camera ---
streaming = False
stream_thread = None

# --- H√†m stream video ---
def stream_video():
    global streaming
    cap = cv2.VideoCapture(0)
    if not cap.isOpened():
        print("‚ùå Kh√¥ng m·ªü ƒë∆∞·ª£c camera")
        streaming = False
        return

    print("üé• Camera ƒëang stream...")
    try:
        while streaming:
            ret, frame = cap.read()
            if not ret:
                print("‚ö†Ô∏è Kh√¥ng ƒë·ªçc ƒë∆∞·ª£c frame, th·ª≠ l·∫°i...")
                time.sleep(0.5)
                continue

            _, buffer = cv2.imencode('.jpg', frame, [int(cv2.IMWRITE_JPEG_QUALITY), 80])  # N√©n ·∫£nh
            try:
                res = requests.post(
                    SERVER_API,
                    data=buffer.tobytes(),
                    headers={'Content-Type': 'image/jpeg'},
                    timeout=2
                )
                if res.status_code != 200:
                    print(f"[Server tr·∫£ l·ªói]: {res.status_code} - {res.text}")
            except Exception as e:
                print(f"[L·ªói g·ª≠i ·∫£nh]: {e}")
                time.sleep(0.5)  # ƒê·ª£i tr∆∞·ªõc khi th·ª≠ l·∫°i

            time.sleep(0.1)  # Gi·∫£m t·∫£i CPU

    except Exception as e:
        print(f"[L·ªói v√≤ng l·∫∑p stream]: {e}")
    finally:
        cap.release()
        streaming = False
        print("üõë Camera ƒë√£ t·∫Øt")

# --- ƒêi·ªÅu khi·ªÉn stream ---
def start_stream():
    global streaming, stream_thread
    if streaming:
        print("‚ö†Ô∏è Stream ƒë√£ ch·∫°y, b·ªè qua...")
        return

    streaming = True
    stream_thread = threading.Thread(target=stream_video)
    stream_thread.daemon = True
    stream_thread.start()
    print("[Camera streaming started]")

def stop_stream():
    global streaming
    streaming = False
    if stream_thread is not None:
        stream_thread.join(timeout=2)
        print("[Camera streaming stopped]")

# --- X·ª≠ l√Ω command t·ª´ WebSocket ---
def handle_command(cmd):
    command = cmd.get("command")
    print(f"[L·ªánh nh·∫≠n ƒë∆∞·ª£c]: {command}")

    if command == "TURN_ON_LIGHT":
        gpio.output(LED_PIN, gpio.HIGH)
        print("üí° ƒê√®n b·∫≠t")
    elif command == "TURN_OFF_LIGHT":
        gpio.output(LED_PIN, gpio.LOW)
        print("üí° ƒê√®n t·∫Øt")
    elif command == "START_CAMERA":
        start_stream()
    elif command == "STOP_CAMERA":
        stop_stream()
    else:
        print(f"[L·ªánh kh√¥ng x√°c ƒë·ªãnh]: {command}")

# --- WebSocket callback ---
def on_message(ws, message):
    try:
        data = json.loads(message)
        handle_command(data)
    except Exception as e:
        print(f"[L·ªói x·ª≠ l√Ω message]: {e}")

def on_open(ws):
    ws.send(json.dumps({
        "type": "REGISTER",
        "userId": USER_ID,
        "deviceId": DEVICE_ID
    }))
    print("‚úÖ ƒê√£ ƒëƒÉng k√Ω WebSocket")

def on_close(ws, close_status_code, close_msg):
    print(f"üîå WebSocket ƒë√≥ng: {close_status_code} - {close_msg}")
    stop_stream()

def on_error(ws, error):
    print(f"[WebSocket l·ªói]: {error}")

# --- Kh·ªüi ch·∫°y WebSocket ---
def run():
    websocket.enableTrace(False)
    ws = websocket.WebSocketApp(
        SERVER_WS,
        on_open=on_open,
        on_message=on_message,
        on_error=on_error,
        on_close=on_close
    )
    ws.run_forever()

# --- Main ---
if __name__ == "__main__":
    try:
        run()
    except KeyboardInterrupt:
        print("‚èπ K·∫øt th√∫c ch∆∞∆°ng tr√¨nh")
    finally:
        stop_stream()
        gpio.cleanup()